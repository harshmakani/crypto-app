{"version":3,"sources":["utils/WebSocketConnectionUtil.js","model/OrderModel.js","App.js","serviceWorker.js","index.js"],"names":["WebSocketConnectionUtil","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","webSocket","WebSocket","addEventListener","subscription","JSON","stringify","type","product_ids","channels","console","log","send","error","message","coinbaseData","parse","data","emit","bind","assertThisInitialized","setTimeout","close","EventEmitter","OrderModel","_ref","priceString","sizeString","price","parseFloat","size","App","props","state","orderBookSubscriber","buy","sell","on","snapshot","slice","provideSnapshot","l2update","provideL2Update","_this2","buyArr","sellArr","forEach","value","_value","slicedToArray","insertSorted","orderArray","orderToInsert","_value2","setState","_this3","changeTuple","_changeTuple","side","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref4","_ref3","index","order","splice","err","return","push","classToDisplay","returnArr","map","row","react_default","a","createElement","TableRow_default","key","TableCell_default","component","scope","className","align","classes","_this$state","root","Grid_default","container","spacing","item","xs","Paper_default","Table_default","table","TableHead_default","head","TableBody_default","renderBuySell","Component","withStyles","theme","margin","unit","color","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAoBqBA,cACjB,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,OACA,IAAMI,EAAY,IAAIC,UAAU,kCAFtB,OAGVD,EAAUE,iBAAiB,OAAQ,WAC/B,IAAMC,EAAeC,KAAKC,UAAU,CAChCC,KAAQ,YACRC,YAAe,CACX,WAEJC,SAAY,CACR,YAGRC,QAAQC,IAAR,YACAV,EAAUW,KAAKR,KAEnBH,EAAUE,iBAAiB,QAAS,SAACU,GACjCH,QAAQC,IAAI,mBAAqBE,KAErCZ,EAAUE,iBAAiB,QAAS,WAChCO,QAAQC,IAAR,eAGJV,EAAUE,iBAAiB,UA1CnC,SAAgCW,GAC5B,IAAMC,EAAeV,KAAKW,MAAMF,EAAQG,MACxC,OAAQF,EAAY,MAChB,IAAK,gBAEL,IAAK,QACD,MACJ,IAAK,WACDlB,KAAKqB,KAAK,WAAYH,GACtB,MACJ,IAAK,WACDlB,KAAKqB,KAAK,WAAYH,KA+BmCI,KAAvBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,MAEtC2B,WAAW,WAAcpB,EAAUqB,SAAW,KAzBpC5B,oCADmC6B,GCpBhCC,EACjB,SAAAA,EAAAC,GAAyC,IAA3BC,EAA2BD,EAA3BC,YAAaC,EAAcF,EAAdE,WAAchC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,GACrC3B,KAAK6B,YAAcA,EACnB7B,KAAK8B,WAAaA,EAClB9B,KAAK+B,MAAQC,WAAWH,GACxB7B,KAAKiC,KAAOD,WAAWF,ICsBzBI,cAEJ,SAAAA,EAAYC,GAAO,IAAAtC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACjBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMmC,KACDC,MAAQ,CACXC,oBAAqB,IAAIzC,EACzB0C,IAAK,GACLC,KAAM,IAGR1C,EAAKuC,MAAMC,oBAAoBG,GAAG,WAAY,SAACC,GAC7C,IAAMF,EAAOE,EAAQ,KAASC,MAAM,EAAG,KAEjCJ,EAAMG,EAAQ,KAASC,MAAM,EAAG,KAEtC7C,EAAK8C,gBAAgBL,EAAKC,KAG5B1C,EAAKuC,MAAMC,oBAAoBG,GAAG,WAAY,SAACI,GAE7C/C,EAAKgD,gBAAgBD,GACjBA,EAAQ,QAAY,GAAG,KAnBZ/C,+EA0BHyC,EAAKC,GAAM,IAAAO,EAAA9C,KACrB+C,EAAS,GACTC,EAAU,GAEdV,EAAIW,QAAQ,SAACC,GAAU,IAAAC,EAAArD,OAAAsD,EAAA,EAAAtD,CACaoD,EADb,GACdrB,EADcsB,EAAA,GACDrB,EADCqB,EAAA,GAErBL,EAAKO,aAAa,CAAEC,WAAYP,EAAQQ,cAAe,IAAI5B,EAAW,CAAEE,cAAaC,mBAGvFS,EAAKU,QAAQ,SAACC,GAAU,IAAAM,EAAA1D,OAAAsD,EAAA,EAAAtD,CACYoD,EADZ,GACfrB,EADe2B,EAAA,GACF1B,EADE0B,EAAA,GAEtBV,EAAKO,aAAa,CAAEC,WAAYN,EAASO,cAAe,IAAI5B,EAAW,CAAEE,cAAaC,mBAGxF9B,KAAKyD,SAAS,CAAEnB,IAAKS,EAAQR,KAAMS,4CAGrBJ,GAAU,IAAAc,EAAA1D,KACpB+C,EAAS/C,KAAKoC,MAAME,IACpBU,EAAUhD,KAAKoC,MAAMG,KACzBK,EAAQ,QAAYK,QAAQ,SAACU,GAAgB,IAAAC,EAAA9D,OAAAsD,EAAA,EAAAtD,CACH6D,EADG,GACpCE,EADoCD,EAAA,GAC9B/B,EAD8B+B,EAAA,GACjB9B,EADiB8B,EAAA,GAE3C,OAAQC,GACN,IAAK,MACH,GAAmB,MAAf/B,EAEF,MAEF4B,EAAKL,aAAa,CAAEC,WAAYP,EAAQQ,cAAe,IAAI5B,EAAW,CAAEE,cAAaC,iBACrF,IAAMQ,EAAMS,EAAOL,MAAM,EAAG,IAC5B7B,QAAQC,IAAIwB,GACZoB,EAAKD,SAAS,CAACnB,IAAKA,IACpB,MACF,IAAK,OACH,GAAmB,MAAfR,EAEF,MAEF4B,EAAKL,aAAa,CAAEC,WAAYN,EAASO,cAAe,IAAI5B,EAAW,CAAEE,cAAaC,iBACtF,IAAMS,EAAOS,EAAQN,MAAM,EAAG,IAC9B7B,QAAQC,IAAIyB,GACZmB,EAAKD,SAAS,CAAElB,KAAMA,+CASc,IAA7Be,EAA6B1B,EAA7B0B,WAAYC,EAAiB3B,EAAjB2B,cAAiBO,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAC1C,QAAAC,EAAAC,EAA2Bb,EAAWc,UAAtCC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAiD,KAAAW,EAAAP,EAAAhB,MAAAwB,EAAA5E,OAAAsD,EAAA,EAAAtD,CAAA2E,EAAA,GAAvCE,EAAuCD,EAAA,GAAhCE,EAAgCF,EAAA,GAC/C,GAAKE,GACDrB,EAAcxB,MAAQ6C,EAAM7C,MAE9B,YADAuB,EAAWuB,OAAOF,EAAO,EAAGpB,IAJU,MAAAuB,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAK,EAAAY,QAAAZ,EAAAY,SAAA,WAAAhB,EAAA,MAAAC,GAQ1CV,EAAW0B,KAAKzB,yCAGJL,EAAO+B,GACjB,IAAIC,EAAY,GAWhB,OAVAhC,EAAMiC,IAAI,SAACC,EAAKT,GACd,OAAOO,EAAUF,KACfK,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAUG,IAAKd,GACbU,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWK,UAAU,KAAKC,MAAM,MAAMC,UAAWZ,GAC9CG,EAAIvD,aAEPwD,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWQ,MAAM,SAASV,EAAItD,gBAI7BoD,mCAGF,IACCa,EAAY/F,KAAKmC,MAAjB4D,QADDC,EAEehG,KAAKoC,MAAnBG,EAFDyD,EAECzD,KAAMD,EAFP0D,EAEO1D,IACd,OACE+C,EAAAC,EAAAC,cAAA,OAAKM,UAAWE,EAAQE,MACtBZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAMa,WAAS,EAACC,QAAS,IACvBf,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAMe,MAAI,EAACC,IAAE,GACXjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,KACED,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAOO,UAAWE,EAAQU,OACxBpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACED,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWO,UAAWE,EAAQY,MAA9B,eACAtB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWQ,MAAM,SAAjB,UAGJT,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,KACGtF,KAAK6G,cAAcvE,EAAKyD,EAAQzD,SAKzC+C,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAMe,MAAI,EAACC,IAAE,GACXjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,KACED,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAOO,UAAWE,EAAQU,OACxBpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACED,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,qBACAD,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWQ,MAAM,SAAjB,UAGJT,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,KACGtF,KAAK6G,cAActE,EAAMwD,EAAQxD,mBAvIlCuE,aAkJHC,uBA9JA,SAAAC,GAAK,MAAK,CACvBf,KAAM,CACJgB,OAA6B,EAArBD,EAAMZ,QAAQc,MAExB5E,IAAK,CACH6E,MAAO,WAET5E,KAAM,CACJ4E,MAAO,SAsJIJ,CAAmB7E,GCjKdkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b33adab4.chunk.js","sourcesContent":["import EventEmitter from 'events'\n\nfunction coinbaseMessageHandler(message) {\n    const coinbaseData = JSON.parse(message.data)\n    switch (coinbaseData['type']) {\n        case 'subscriptions':\n            break\n        case 'error':\n            break\n        case 'snapshot':\n            this.emit('snapshot', coinbaseData)\n            break\n        case 'l2update':\n            this.emit('l2update', coinbaseData)\n            break\n        default:\n            break\n    }\n}\n\nexport default class WebSocketConnectionUtil extends EventEmitter {\n    constructor() {\n        super()\n        const webSocket = new WebSocket('wss://ws-feed.pro.coinbase.com');\n        webSocket.addEventListener('open', () => {\n            const subscription = JSON.stringify({\n                \"type\": \"subscribe\",\n                \"product_ids\": [\n                    \"BTC-USD\"\n                ],\n                \"channels\": [\n                    \"level2\"\n                ]\n            });\n            console.log(`got open`)\n            webSocket.send(subscription);            \n        })\n        webSocket.addEventListener('error', (error) => {\n            console.log('WebSocket Error ' + error);\n        });\n        webSocket.addEventListener('close', () => {\n            console.log(`got close`)\n\n        });\n        webSocket.addEventListener('message', coinbaseMessageHandler.bind(this))\n\n        setTimeout(function () { webSocket.close() }, 10000);\n    }\n}","export default class OrderModel {\n    constructor({ priceString, sizeString }) {\n        this.priceString = priceString\n        this.sizeString = sizeString\n        this.price = parseFloat(priceString)\n        this.size = parseFloat(sizeString)\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport WebSocketConnectionUtil from './utils/WebSocketConnectionUtil';\nimport OrderModel from './model/OrderModel';\n\n\nconst styles = theme => ({\n  root: {\n    margin: theme.spacing.unit * 3\n  },\n  buy: {\n    color: '#44be24',\n  },\n  sell: {\n    color: 'red'\n  }\n});\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      orderBookSubscriber: new WebSocketConnectionUtil(),\n      buy: [],\n      sell: []\n    }\n\n    this.state.orderBookSubscriber.on('snapshot', (snapshot) => {\n      const sell = snapshot['asks'].slice(0, 100);\n\n      const buy = snapshot['bids'].slice(0, 100);\n\n      this.provideSnapshot(buy, sell);\n    })\n\n    this.state.orderBookSubscriber.on('l2update', (l2update) => {\n      //let sellArr = this.state.sell;\n      this.provideL2Update(l2update);\n      if (l2update['changes'][0][0] === 'sell') {\n        //console.log(l2update['changes'][0][1] + ' ' + parseFloat(l2update['changes'][0][2]).toFixed(2))\n      }\n\n    })\n  }\n\n  provideSnapshot(buy, sell) {\n    let buyArr = [];\n    let sellArr = [];\n    \n    buy.forEach((value) => {\n      const [priceString, sizeString] = value;\n      this.insertSorted({ orderArray: buyArr, orderToInsert: new OrderModel({ priceString, sizeString }) });\n    });\n    \n    sell.forEach((value) => {\n      const [priceString, sizeString] = value;\n      this.insertSorted({ orderArray: sellArr, orderToInsert: new OrderModel({ priceString, sizeString }) });\n    });\n\n    this.setState({ buy: buyArr, sell: sellArr });\n  }\n\n  provideL2Update(l2update) {\n    let buyArr = this.state.buy;\n    let sellArr = this.state.sell;\n    l2update['changes'].forEach((changeTuple) => {\n      const [side, priceString, sizeString] = changeTuple\n      switch (side) {\n        case 'buy':\n          if (sizeString === '0') {\n            //deleteOrderOfPrice({ orders: this.descendingBids, priceString })\n            break\n          }\n          this.insertSorted({ orderArray: buyArr, orderToInsert: new OrderModel({ priceString, sizeString }) });\n          const buy = buyArr.slice(0, 50);\n          console.log(buy);\n          this.setState({buy: buy});\n          break\n        case 'sell':\n          if (sizeString === '0') {\n            //deleteOrderOfPrice({ orders: this.descendingAsks, priceString })\n            break\n          }\n          this.insertSorted({ orderArray: sellArr, orderToInsert: new OrderModel({ priceString, sizeString }) });\n          const sell = sellArr.slice(0, 50);\n          console.log(sell);\n          this.setState({ sell: sell });\n          //this.setState({sell: sellArr});\n          break\n        default:\n          break // log error\n      }\n    })\n  }\n\n  insertSorted({ orderArray, orderToInsert }) {\n    for (let [index, order] of orderArray.entries()) {\n      if (!order) { continue; }\n      if (orderToInsert.price > order.price) {\n        orderArray.splice(index, 0, orderToInsert);\n        return;\n      }\n    }\n    orderArray.push(orderToInsert);\n  }\n\n  renderBuySell(value, classToDisplay) {\n      let returnArr = [];\n      value.map((row, index) => {\n        return returnArr.push (\n          <TableRow key={index}>\n            <TableCell component=\"th\" scope=\"row\" className={classToDisplay}>\n              {row.priceString}\n            </TableCell>\n            <TableCell align=\"right\">{row.sizeString}</TableCell>\n          </TableRow>\n        );\n      })\n      return returnArr;\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { sell, buy } = this.state;\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={24}>\n          <Grid item xs>\n            <Paper>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell className={classes.head}>Buy (Price)</TableCell>\n                    <TableCell align=\"right\">Size</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.renderBuySell(buy, classes.buy)}\n                </TableBody>\n              </Table>\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <Paper>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Sell (Price)</TableCell>\n                    <TableCell align=\"right\">Size</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.renderBuySell(sell, classes.sell)}\n                </TableBody>\n              </Table>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}